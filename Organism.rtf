{\rtf1\ansi\ansicpg1252\cocoartf2577
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\froman\fcharset0 Times-Bold;\f2\froman\fcharset0 Times-Italic;
\f3\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c93333;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 JavaScript Syntax, Part II\
Mysterious Organism\
\pard\pardeftab720\sa319\partightenfactor0

\f1\b \cf2 Overview\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b0 \cf2 This project is slightly different than others you have encountered thus far on Codecademy. Instead of a step-by-step tutorial, this project contains a series of open-ended requirements which describe the project you\'92ll be building. There are many possible ways to correctly fulfill all of these requirements, and you should expect to use the internet, Codecademy, and other resources when you encounter a problem that you cannot easily solve. \
\pard\pardeftab720\sa319\partightenfactor0

\f1\b \cf2 Project Goals\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b0 \cf2 Context: You\'92re part of a research team that has found a new mysterious organism at the bottom of the ocean near hydrothermal vents. Your team names the organism, 
\f2\i Pila aequor
\f0\i0  (
\f2\i P. aequor
\f0\i0 ), and finds that it is only comprised of 15 DNA bases. The small DNA samples and frequency at which it mutates due to the hydrothermal vents make 
\f2\i P. aequor
\f0\i0  an interesting specimen to study. However, 
\f2\i P. aequor
\f0\i0  cannot survive above sea level and locating 
\f2\i P. aequor
\f0\i0  in the deep sea is difficult and expensive. Your job is to create objects that simulate the DNA of 
\f2\i P. aequor
\f0\i0  for your research team to study. \
As you progress through the steps, use the terminal and 
\f3 console.log()
\f0  statements to check the output of your loops and functions. \
\pard\pardeftab720\sa319\partightenfactor0

\f1\b \cf2 Setup Instructions\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b0 \cf2 If you choose to do this project on your computer instead of Codecademy, you can download what you\'92ll need by clicking the \'93Download\'94 button below. You\'92ll need to open and work in 
\f1\b main.js
\f0\b0  in a text editor. To edit 
\f1\b main.js
\f0\b0 , use your text editor of choice. If you need a recommendation or help to install an editor, we recommend looking into our {\field{\*\fldinst{HYPERLINK "https://www.codecademy.com/articles/visual-studio-code"}}{\fldrslt \cf3 \ul \ulc3 \strokec3 article about setting up a text editor for web development}} (Follow along until you get to the section: \'93Practice: Let\'92s Make a Project\'94). To run 
\f1\b main.js
\f0\b0  on your computer, you will need to install Node.js. If you need help installing Node.js, read our {\field{\*\fldinst{HYPERLINK "https://www.codecademy.com/articles/setting-up-node-locally"}}{\fldrslt \cf3 \ul \ulc3 \strokec3 article on installing Node}}. \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf2 Tasks\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs24 \cf2 0/9 Complete\
Mark the tasks as complete by checking them off\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf2 Prerequisites\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs24 \cf2 \
1.\
\pard\pardeftab720\sa240\partightenfactor0
\cf2 In order to complete this project, you should have completed the first few sections of {\field{\*\fldinst{HYPERLINK "https://www.codecademy.com/courses/introduction-to-javascript"}}{\fldrslt \cf3 \ul \ulc3 \strokec3 Introduction to JavaScript}} (through Learn JavaScript: Objects).\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf2 Project Requirements\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs24 \cf2 \
2.\
\pard\pardeftab720\sa240\partightenfactor0
\cf2 Look over the starter code. There are two helper functions: 
\f3 returnRandBase()
\f0  and 
\f3 mockUpStrand()
\f0 .\
DNA is comprised of four bases (
\f1\b A
\f0\b0 denine, 
\f1\b T
\f0\b0 hymine, 
\f1\b C
\f0\b0 ytosine, and 
\f1\b G
\f0\b0 uanine). When 
\f3 returnRandBase()
\f0  is called, it will randomly select a base and return the base (
\f3 'A'
\f0 ,
\f3 'T'
\f0 ,
\f3 'C'
\f0 , or 
\f3 'G'
\f0 ). \
\pard\pardeftab720\sa240\partightenfactor0

\f3 \cf2 mockUpStrand()
\f0  is used to generate an array containing 15 bases to represent a single DNA strand with 15 bases. \
You\'92ll use these helper functions later to create your objects that represent 
\f2\i P. aequor
\f0\i0 .\
\pard\pardeftab720\partightenfactor0
\cf2 \
3.\
\pard\pardeftab720\sa240\partightenfactor0
\cf2 Since you need to create multiple objects, create a factory function 
\f3 pAequorFactory()
\f0  that has two parameters: \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The first parameter is number (no two organisms should have the same number). \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The second parameter is an array of 15 DNA bases. \
\pard\pardeftab720\sa240\partightenfactor0

\f3 \cf2 pAequorFactor()
\f0  should return an object that contains the properties 
\f3 specimenNum
\f0  and 
\f3 dna
\f0  that correspond to the parameters provided. \
You\'92ll also add more methods to this returned object in the later steps. \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sa240\partightenfactor0
\cf2 Visit the {\field{\*\fldinst{HYPERLINK "https://www.codecademy.com/courses/introduction-to-javascript/lessons/advanced-objects/exercises/factory-functions"}}{\fldrslt \cf3 \ul \ulc3 \strokec3 factory functions exercise}} for a refresher. {\field{\*\fldinst{HYPERLINK "https://discuss.codecademy.com/t/how-would-you-know-when-to-use-factory-functions/369255"}}{\fldrslt \cf3 \ul \ulc3 \strokec3 This forum post}} also explains the use case for factory functions. \
You can test 
\f3 pAequorFactory()
\f0  by calling it with the arguments: 
\f3 1
\f0  and 
\f3 mockUpStrand()
\f0 . Check to see that the returned object contains the requested two properties: 
\f3 specimenNum
\f0  and 
\f3 dna
\f0 . You can also provide a specific strand of DNA rather than providing a randomized strand using 
\f3 mockUpStrand()
\f0 .\
\pard\pardeftab720\partightenfactor0
\cf2 \
4.\
\pard\pardeftab720\sa240\partightenfactor0
\cf2 Your team wants you to simulate 
\f2\i P. aequor
\f0\i0 \'91s high rate of mutation (change in its DNA).\
To simulate a mutation, in 
\f3 pAequorFactory()
\f0 \'91s returned object, add the method 
\f3 .mutate()
\f0 .\
\pard\pardeftab720\sa240\partightenfactor0

\f3 \cf2 .mutate()
\f0  is responsible for randomly selecting a base in the object\'92s 
\f3 dna
\f0  property and changing the current base to a different base. Then 
\f3 .mutate()
\f0  will return the object\'92s 
\f3 dna
\f0 . \
For example, if the randomly selected base is the 1st base and it is 
\f3 'A'
\f0 , the base must be changed to 
\f3 'T'
\f0 , 
\f3 'C'
\f0 , or 
\f3 'G'
\f0 . But it cannot be 
\f3 'A'
\f0  again. \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sa240\partightenfactor0

\f3 \cf2 returnRandBase()
\f0  contains a method for selecting a random element in an array using {\field{\*\fldinst{HYPERLINK "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor"}}{\fldrslt 
\f3 \cf3 \ul \ulc3 \strokec3 Math.floor()}} and {\field{\*\fldinst{HYPERLINK "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random"}}{\fldrslt 
\f3 \cf3 \ul \ulc3 \strokec3 Math.random()}}.\
You can also use 
\f3 returnRandBase()
\f0  to generate a random base, but make sure that the current base and the generated base are not the same. \
You can test this method by creating an instance of 
\f3 pAequor
\f0  and checking that its 
\f3 .dna
\f0  changes after calling 
\f3 .mutate()
\f0  on itself. \
\pard\pardeftab720\partightenfactor0
\cf2 \
5.\
\pard\pardeftab720\sa240\partightenfactor0
\cf2 Your research team wants to be able to compare the DNA sequences of different 
\f2\i P. aequor
\f0\i0 . You\'92ll have to add a new method (
\f3 .compareDNA()
\f0 ) to the returned object of the factory function.\
\pard\pardeftab720\sa240\partightenfactor0

\f3 \cf2 .compareDNA()
\f0  has one parameter, another 
\f3 pAequor
\f0  object. \
The behavior of 
\f3 .compareDNA()
\f0  is to compare the current 
\f3 pAequor
\f0 \'91s 
\f3 .dna
\f0  with the passed in 
\f3 pAequor
\f0 \'91s 
\f3 .dna
\f0  and compute how many bases are identical and in the same locations. 
\f3 .compareDNA()
\f0  does not return anything, but prints a message that states the percentage of DNA the two objects have in common \'97 use the 
\f3 .specimenNum
\f0  to identify which 
\f3 pAequor
\f0  objects are being compared.\
For example:\
\pard\pardeftab720\partightenfactor0

\f3 \cf2 ex1 =\'a0['A', 'C', 'T', 'G']\
ex2 =\'a0['C', 'A', 'T', 'T']\
\pard\pardeftab720\sa240\partightenfactor0
\cf2 ex1
\f0  and 
\f3 ex2
\f0  only have the 3rd element in common (
\f3 'T'
\f0 ) and therefore, have 25% (1/4) of their DNA in common. The resulting message would read something along the lines of: 
\f3 specimen #1 and specimen #2 have 25% DNA in common
\f0 . \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sa240\partightenfactor0
\cf2 You\'92re adding this method inside the return object of the factory function like 
\f3 .newMethod()
\f0  below:\
\pard\pardeftab720\partightenfactor0

\f3 \cf2 const sampleFactory =\'a0() => \{\
\'a0\'a0return \{\
\'a0\'a0\'a0\'a0newMethod() \{\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f0 \cf2 There are many ways to create this method, most involve iterating through both arrays at the same time and comparing the elements with the same indices.\
To calculate the percentage, take the number of identical bases, divided by the total number of bases and multiply the result by 
\f3 100
\f0 . You can use a method like {\field{\*\fldinst{HYPERLINK "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed"}}{\fldrslt 
\f3 \cf3 \ul \ulc3 \strokec3 .toFixed()}} to limit the number of decimal places seen. \
Remember to check your method by creating two instances of 
\f3 pAequor
\f0  and comparing their DNA. \
\pard\pardeftab720\partightenfactor0
\cf2 \
6.\
\pard\pardeftab720\sa240\partightenfactor0

\f2\i \cf2 P. aequor
\f0\i0  have a likelier chance of survival if their DNA is made up of at least 60% 
\f3 'C'
\f0  or 
\f3 'G'
\f0  bases. \
In the returned object of 
\f3 pAequorFactory()
\f0 , add another method 
\f3 .willLikelySurvive()
\f0 .\
\pard\pardeftab720\sa240\partightenfactor0

\f3 \cf2 .willLikelySurvive()
\f0  returns 
\f3 true
\f0  if the object\'92s 
\f3 .dna
\f0  array contains at least 60% 
\f3 'C'
\f0  or 
\f3 'G'
\f0  bases. Otherwise, 
\f3 .willLikelySurvive()
\f0  returns false. \
\pard\pardeftab720\partightenfactor0
\cf2 \
7.\
\pard\pardeftab720\sa240\partightenfactor0
\cf2 With the factory function set up, your team requests that you create 30 instances of 
\f3 pAequor
\f0  that can survive in their natural environment. Store these instances in an array for your team to study later. \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sa240\partightenfactor0
\cf2 Remember, you only want to add the instance to the array if 
\f3 .willLikelySurvive()
\f0  returns 
\f3 true
\f0  for that instance.\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf2 Project Extensions & Solution\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs24 \cf2 \
8.\
\pard\pardeftab720\sa240\partightenfactor0
\cf2 Great work! Visit {\field{\*\fldinst{HYPERLINK "https://discuss.codecademy.com/t/mysterious-organism-challenge-project-javascript/462376"}}{\fldrslt \cf3 \ul \ulc3 \strokec3 our forums}} to compare your project to our sample solution code. You can also learn how to host your own solution on GitHub so you can share it with other learners! Your solution might look different from ours, and that\'92s okay! There are multiple ways to solve these projects, and you\'92ll learn more by seeing others\'92 code.\
\pard\pardeftab720\partightenfactor0
\cf2 \
9.\
\pard\pardeftab720\sa240\partightenfactor0
\cf2 If you\'92d like to challenge yourself further, you could consider the following:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Create a 
\f3 .complementStrand()
\f0  method to the factory function\'92s object that returns the {\field{\*\fldinst{HYPERLINK "http://discoveringthegenome.org/discovering-genome/dna-sequencing/dna-complementary-base-pairing"}}{\fldrslt \cf3 \ul \ulc3 \strokec3 complementary DNA strand}}. The rules are that 
\f3 'A'
\f0 s match with 
\f3 'T'
\f0 s and vice versa. Also, 
\f3 'C'
\f0 s match with 
\f3 'G'
\f0 s and vice versa. (Check the hint for more details)\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Use the 
\f3 .compareDNA()
\f0  to find the two most related instances of 
\f3 pAequor
\f0 .\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sa240\partightenfactor0
\cf2 DNA sequences are found in nature as double-stranded structures (helices). The rules are that 
\f3 'A'
\f0  bases bind with 
\f3 'T'
\f0  bases (and vice versa) and 
\f3 'C'
\f0  bases bind with 
\f3 'G'
\f0  bases (and vice versa). \
Suppose we have two strands of DNA, we\'92ll call them strand1 and strand2. If the strand1\'92s first base is an 
\f3 'A'
\f0 , then the strand2\'92s opposing base is a 
\f3 'T'
\f0 . If the second spot of strand1 is a 
\f3 'C'
\f0 , then strand2\'92s opposing base is a 
\f3 'G'
\f0 . \
To show this as part of your code, if a 
\f3 .dna
\f0  sequence is:\
\pard\pardeftab720\partightenfactor0

\f3 \cf2 [ 'T', 'A', 'C', 'A', 'G', 'A', 'T', 'A', 'C', 'G', 'A', 'C', 'G', 'A', 'T' ]\
\pard\pardeftab720\sa240\partightenfactor0

\f0 \cf2 Then 
\f3 .complementStrand()
\f0  should return:\
\pard\pardeftab720\partightenfactor0

\f3 \cf2 [ 'A', 'T', 'G', 'T', 'C', 'T', 'A', 'T', 'G', 'C', 'T', 'G', 'C', 'T', 'A' ]\
}